{"ast":null,"code":"var _jsxFileName = \"/Users/karthikeyanbalasubramanian/Documents/Documents-Mac/React-LCO/Git/react-tic-tac-toe/src/components/CardList/CardList.js\";\nimport React, { useState } from 'react';\nimport { Card, CardBody, Button } from 'reactstrap';\nimport Icon from '../Icon';\nimport './CardList.css';\nimport { toast } from 'react-toastify'; // For the 9 Items or the 9 Blocks for TicTacToe\n\nconst itemArray = new Array(9).fill('empty');\n\nconst CardList = () => {\n  // For the array to fill with State\n  const [isValue, setIsValue] = useState(false); // For the winner message\n\n  const [resultMsg, setResultMsg] = useState(\"\"); // To reload the game\n\n  const reloadGame = () => {\n    setIsValue(false);\n    setResultMsg(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  }; // Check Winner\n\n\n  const checkIsWinner = () => {\n    if (itemArray[0] !== \"empty\" && itemArray[0] === itemArray[1] && itemArray[1] === itemArray[2]) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (itemArray[3] !== \"empty\" && itemArray[3] === itemArray[4] && itemArray[4] === itemArray[5]) {\n      setResultMsg(`${itemArray[3]} wins`);\n    } else if (itemArray[6] !== \"empty\" && itemArray[6] === itemArray[7] && itemArray[7] === itemArray[8]) {\n      setResultMsg(`${itemArray[6]} wins`);\n    } else if (itemArray[0] !== \"empty\" && itemArray[0] === itemArray[3] && itemArray[3] === itemArray[6]) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (itemArray[1] !== \"empty\" && itemArray[1] === itemArray[4] && itemArray[4] === itemArray[7]) {\n      setResultMsg(`${itemArray[1]} wins`);\n    } else if (itemArray[2] !== \"empty\" && itemArray[2] === itemArray[5] && itemArray[5] === itemArray[8]) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (itemArray[0] !== \"empty\" && itemArray[0] === itemArray[4] && itemArray[4] === itemArray[8]) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (itemArray[2] !== \"empty\" && itemArray[2] === itemArray[4] && itemArray[4] === itemArray[6]) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (itemArray[0] !== \"empty\" && itemArray[1] !== \"empty\" && itemArray[2] !== \"empty\" && itemArray[3] !== \"empty\" && itemArray[4] !== \"empty\" && itemArray[5] !== \"empty\" && itemArray[6] !== \"empty\" && itemArray[7] !== \"empty\" && itemArray[8] !== \"empty\") {\n      setResultMsg('Game is Tie');\n    }\n  }; //Change Item\n\n\n  const changeItem = itemNumber => {\n    // Result Message\n    if (resultMsg) {\n      return toast(resultMsg, {\n        type: 'success'\n      });\n    } // Item fill validation\n\n\n    if (itemArray[itemNumber] === 'empty') {\n      itemArray[itemNumber] = isValue ? 'cross' : 'circle';\n      setIsValue(!isValue);\n    } else {\n      return toast('Already Filled', {\n        type: 'error'\n      });\n    }\n\n    return checkIsWinner();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"infoBlock\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Player 1: \", /*#__PURE__*/React.createElement(Icon, {\n    className: \"icons circleIcon\",\n    name: \"circle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 23\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, \"Player 2: \", /*#__PURE__*/React.createElement(Icon, {\n    className: \"icons crossIcon\",\n    name: \"cross\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Empty: \", /*#__PURE__*/React.createElement(Icon, {\n    className: \"icons emptyIcon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 20\n    }\n  }), \" \")), resultMsg ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-2 mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"h3 text-success text-uppercase text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, resultMsg), /*#__PURE__*/React.createElement(Button, {\n    color: \"success\",\n    block: true,\n    onClick: reloadGame,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, \"Reload the game\")) : /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"h3 text-center text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, isValue ? \"Cross\" : \"Circle\", \" turn\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, itemArray.map((item, index) => /*#__PURE__*/React.createElement(Card, {\n    onClick: () => changeItem(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    className: \"icons\",\n    name: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nexport default CardList;","map":{"version":3,"sources":["/Users/karthikeyanbalasubramanian/Documents/Documents-Mac/React-LCO/Git/react-tic-tac-toe/src/components/CardList/CardList.js"],"names":["React","useState","Card","CardBody","Button","Icon","toast","itemArray","Array","fill","CardList","isValue","setIsValue","resultMsg","setResultMsg","reloadGame","checkIsWinner","changeItem","itemNumber","type","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardBody, Button } from 'reactstrap';\nimport Icon from '../Icon';\nimport './CardList.css';\nimport { toast } from 'react-toastify';\n\n// For the 9 Items or the 9 Blocks for TicTacToe\nconst itemArray = new Array(9).fill('empty');\n\nconst CardList = () => {\n  \n  // For the array to fill with State\n  const [isValue, setIsValue] = useState(false);\n\n  // For the winner message\n  const [resultMsg, setResultMsg] = useState(\"\");\n\n  // To reload the game\n  const reloadGame = () => {\n    setIsValue(false);\n    setResultMsg(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  // Check Winner\n  const checkIsWinner = () => {\n    if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[1] &&\n      itemArray[1] === itemArray[2]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setResultMsg(`${itemArray[3]} wins`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[6]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setResultMsg(`${itemArray[1]} wins`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[1] !== \"empty\" &&\n      itemArray[2] !== \"empty\" &&\n      itemArray[3] !== \"empty\" &&\n      itemArray[4] !== \"empty\" &&\n      itemArray[5] !== \"empty\" &&\n      itemArray[6] !== \"empty\" &&\n      itemArray[7] !== \"empty\" &&\n      itemArray[8] !== \"empty\") {\n        setResultMsg('Game is Tie');\n    }\n  };\n\n  //Change Item\n  const changeItem = itemNumber => {\n    // Result Message\n    if(resultMsg) {\n      return toast(resultMsg, { type: 'success' });\n    }\n    // Item fill validation\n    if(itemArray[itemNumber] === 'empty') {\n      itemArray[itemNumber] = isValue ? 'cross' : 'circle';\n      setIsValue(!isValue);\n    } else {\n      return toast('Already Filled', { type: 'error' })\n    }\n\n    return checkIsWinner();\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"infoBlock\">\n        <h4>Player 1: <Icon className=\"icons circleIcon\" name=\"circle\" /> </h4>\n        <h4>Player 2: <Icon className=\"icons crossIcon\" name=\"cross\" /> </h4>\n        <h4>Empty: <Icon className=\"icons emptyIcon\" /> </h4>\n      </div>\n      {resultMsg ?\n        (\n          <div className=\"mb-2 mt-2\">\n            <h3 className=\"h3 text-success text-uppercase text-center\">\n              {resultMsg}\n            </h3>\n            <Button\n              color=\"success\"\n              block\n              onClick={reloadGame}\n            >Reload the game\n            </Button>\n          </div>\n        )\n      :\n        (\n          <h3 className=\"h3 text-center text-primary\">\n            {isValue ? \"Cross\" : \"Circle\"} turn\n          </h3>\n        )\n      }\n      <div className=\"grid\">\n        {itemArray.map((item, index) => (\n            <Card onClick={() => changeItem(index)}>\n              <CardBody className=\"box\">\n                <Icon className=\"icons\" name={item} />\n              </CardBody>\n            </Card>\n        ))}\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default CardList;\n"]},"metadata":{},"sourceType":"module"}