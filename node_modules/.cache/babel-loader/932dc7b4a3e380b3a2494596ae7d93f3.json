{"ast":null,"code":"import _slicedToArray from\"/Users/karthikeyanbalasubramanian/Documents/Documents-Mac/React-LCO/Git/react-tic-tac-toe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Card,CardBody,Button}from'reactstrap';import Icon from'../Icon';import'./CardList.css';import{toast}from'react-toastify';// For the 9 Items or the 9 Blocks for TicTacToe\nvar itemArray=new Array(9).fill('empty');var CardList=function CardList(){// For the array to fill with State\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isValue=_useState2[0],setIsValue=_useState2[1];// For the winner message\nvar _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),resultMsg=_useState4[0],setResultMsg=_useState4[1];// To reload the game\nvar reloadGame=function reloadGame(){setIsValue(false);setResultMsg(\"\");itemArray.fill(\"empty\",0,9);};// Check Winner\nvar checkIsWinner=function checkIsWinner(){if(itemArray[0]!==\"empty\"&&itemArray[0]===itemArray[1]&&itemArray[1]===itemArray[2]){setResultMsg(\"\".concat(itemArray[0],\" wins\"));}else if(itemArray[3]!==\"empty\"&&itemArray[3]===itemArray[4]&&itemArray[4]===itemArray[5]){setResultMsg(\"\".concat(itemArray[3],\" wins\"));}else if(itemArray[6]!==\"empty\"&&itemArray[6]===itemArray[7]&&itemArray[7]===itemArray[8]){setResultMsg(\"\".concat(itemArray[6],\" wins\"));}else if(itemArray[0]!==\"empty\"&&itemArray[0]===itemArray[3]&&itemArray[3]===itemArray[6]){setResultMsg(\"\".concat(itemArray[0],\" wins\"));}else if(itemArray[1]!==\"empty\"&&itemArray[1]===itemArray[4]&&itemArray[4]===itemArray[7]){setResultMsg(\"\".concat(itemArray[1],\" wins\"));}else if(itemArray[2]!==\"empty\"&&itemArray[2]===itemArray[5]&&itemArray[5]===itemArray[8]){setResultMsg(\"\".concat(itemArray[2],\" wins\"));}else if(itemArray[0]!==\"empty\"&&itemArray[0]===itemArray[4]&&itemArray[4]===itemArray[8]){setResultMsg(\"\".concat(itemArray[0],\" wins\"));}else if(itemArray[2]!==\"empty\"&&itemArray[2]===itemArray[4]&&itemArray[4]===itemArray[6]){setResultMsg(\"\".concat(itemArray[2],\" wins\"));}else if(itemArray[0]!==\"empty\"&&itemArray[1]!==\"empty\"&&itemArray[2]!==\"empty\"&&itemArray[3]!==\"empty\"&&itemArray[4]!==\"empty\"&&itemArray[5]!==\"empty\"&&itemArray[6]!==\"empty\"&&itemArray[7]!==\"empty\"&&itemArray[8]!==\"empty\"){setResultMsg('Game is Tie');}};//Change Item\nvar changeItem=function changeItem(itemNumber){// Result Message\nif(resultMsg){return toast(resultMsg,{type:'success'});}// Item fill validation\nif(itemArray[itemNumber]==='empty'){itemArray[itemNumber]=isValue?'cross':'circle';setIsValue(!isValue);}else{return toast('Already Filled',{type:'error'});}return checkIsWinner();};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"infoBlock\"},/*#__PURE__*/React.createElement(\"h4\",null,\"Player 1: \",/*#__PURE__*/React.createElement(Icon,{className:\"icons circleIcon\",name:\"circle\"}),\" \"),/*#__PURE__*/React.createElement(\"h4\",null,\"Player 2: \",/*#__PURE__*/React.createElement(Icon,{className:\"icons crossIcon\",name:\"cross\"}),\" \"),/*#__PURE__*/React.createElement(\"h4\",null,\"Empty: \",/*#__PURE__*/React.createElement(Icon,{className:\"icons emptyIcon\"}),\" \")),resultMsg?/*#__PURE__*/React.createElement(\"div\",{className:\"mb-2 mt-2\"},/*#__PURE__*/React.createElement(\"h3\",{className:\"h3 text-success text-uppercase text-center\"},resultMsg),/*#__PURE__*/React.createElement(Button,{color:\"success\",block:true,onClick:reloadGame},\"Reload the game\")):/*#__PURE__*/React.createElement(\"h3\",{className:\"h3 text-center text-primary\"},isValue?\"Cross\":\"Circle\",\" turn\"),/*#__PURE__*/React.createElement(\"div\",{className:\"grid\"},itemArray.map(function(item,index){return/*#__PURE__*/React.createElement(Card,{onClick:function onClick(){return changeItem(index);}},/*#__PURE__*/React.createElement(CardBody,{className:\"box\"},/*#__PURE__*/React.createElement(Icon,{className:\"icons\",name:item})));})));};export default CardList;","map":{"version":3,"sources":["/Users/karthikeyanbalasubramanian/Documents/Documents-Mac/React-LCO/Git/react-tic-tac-toe/src/components/CardList/CardList.js"],"names":["React","useState","Card","CardBody","Button","Icon","toast","itemArray","Array","fill","CardList","isValue","setIsValue","resultMsg","setResultMsg","reloadGame","checkIsWinner","changeItem","itemNumber","type","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardBody, Button } from 'reactstrap';\nimport Icon from '../Icon';\nimport './CardList.css';\nimport { toast } from 'react-toastify';\n\n// For the 9 Items or the 9 Blocks for TicTacToe\nconst itemArray = new Array(9).fill('empty');\n\nconst CardList = () => {\n  \n  // For the array to fill with State\n  const [isValue, setIsValue] = useState(false);\n\n  // For the winner message\n  const [resultMsg, setResultMsg] = useState(\"\");\n\n  // To reload the game\n  const reloadGame = () => {\n    setIsValue(false);\n    setResultMsg(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  // Check Winner\n  const checkIsWinner = () => {\n    if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[1] &&\n      itemArray[1] === itemArray[2]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setResultMsg(`${itemArray[3]} wins`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[6]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setResultMsg(`${itemArray[1]} wins`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[1] !== \"empty\" &&\n      itemArray[2] !== \"empty\" &&\n      itemArray[3] !== \"empty\" &&\n      itemArray[4] !== \"empty\" &&\n      itemArray[5] !== \"empty\" &&\n      itemArray[6] !== \"empty\" &&\n      itemArray[7] !== \"empty\" &&\n      itemArray[8] !== \"empty\") {\n        setResultMsg('Game is Tie');\n    }\n  };\n\n  //Change Item\n  const changeItem = itemNumber => {\n    // Result Message\n    if(resultMsg) {\n      return toast(resultMsg, { type: 'success' });\n    }\n    // Item fill validation\n    if(itemArray[itemNumber] === 'empty') {\n      itemArray[itemNumber] = isValue ? 'cross' : 'circle';\n      setIsValue(!isValue);\n    } else {\n      return toast('Already Filled', { type: 'error' })\n    }\n\n    return checkIsWinner();\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"infoBlock\">\n        <h4>Player 1: <Icon className=\"icons circleIcon\" name=\"circle\" /> </h4>\n        <h4>Player 2: <Icon className=\"icons crossIcon\" name=\"cross\" /> </h4>\n        <h4>Empty: <Icon className=\"icons emptyIcon\" /> </h4>\n      </div>\n      {resultMsg ?\n        (\n          <div className=\"mb-2 mt-2\">\n            <h3 className=\"h3 text-success text-uppercase text-center\">\n              {resultMsg}\n            </h3>\n            <Button\n              color=\"success\"\n              block\n              onClick={reloadGame}\n            >Reload the game\n            </Button>\n          </div>\n        )\n      :\n        (\n          <h3 className=\"h3 text-center text-primary\">\n            {isValue ? \"Cross\" : \"Circle\"} turn\n          </h3>\n        )\n      }\n      <div className=\"grid\">\n        {itemArray.map((item, index) => (\n            <Card onClick={() => changeItem(index)}>\n              <CardBody className=\"box\">\n                <Icon className=\"icons\" name={item} />\n              </CardBody>\n            </Card>\n        ))}\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default CardList;\n"]},"metadata":{},"sourceType":"module"}