{"version":3,"sources":["components/Icon.js","components/CardList/CardList.js","App.js","serviceWorker.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","CardList","useState","isValue","setIsValue","resultMsg","setResultMsg","changeItem","itemNumber","toast","type","Fragment","Button","color","block","onClick","map","item","index","Card","CardBody","App","Container","position","Row","Col","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3d2f656d.chunk.js","sourcesContent":["import React from 'react';\nimport { FaRegCircle, FaPenAlt, FaTimes } from 'react-icons/fa'; \n\nconst Icon = ({ name }) => {\n    switch (name) {\n        case \"circle\":\n            return <FaRegCircle className=\"icons circleIcon\" />;\n            // break;\n        case 'cross':\n            return <FaTimes className=\"icons crossIcon\" />;\n            // break;\n        default:\n            return <FaPenAlt className=\"icons penIcon\" />;\n            // break;\n    }\n};\n\nexport default Icon;\n","import React, { useState } from 'react';\nimport { Card, CardBody, Button } from 'reactstrap';\nimport Icon from '../Icon';\nimport './CardList.css';\nimport { toast } from 'react-toastify';\n\n// For the 9 Items or the 9 Blocks for TicTacToe\nconst itemArray = new Array(9).fill('empty');\n\nconst CardList = () => {\n  \n  // For the array to fill with State\n  const [isValue, setIsValue] = useState(false);\n\n  // For the winner message\n  const [resultMsg, setResultMsg] = useState(\"\");\n\n  // To reload the game\n  const reloadGame = () => {\n    setIsValue(false);\n    setResultMsg(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  // Check Winner\n  const checkIsWinner = () => {\n    if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[1] &&\n      itemArray[1] === itemArray[2]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setResultMsg(`${itemArray[3]} wins`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[6]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setResultMsg(`${itemArray[1]} wins`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setResultMsg(`${itemArray[0]} wins`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setResultMsg(`${itemArray[2]} wins`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[1] !== \"empty\" &&\n      itemArray[2] !== \"empty\" &&\n      itemArray[3] !== \"empty\" &&\n      itemArray[4] !== \"empty\" &&\n      itemArray[5] !== \"empty\" &&\n      itemArray[6] !== \"empty\" &&\n      itemArray[7] !== \"empty\" &&\n      itemArray[8] !== \"empty\") {\n        setResultMsg('Game is Tie');\n    }\n  };\n\n  //Change Item\n  const changeItem = itemNumber => {\n    // Result Message\n    if(resultMsg) {\n      return toast(resultMsg, { type: 'success' });\n    }\n    // Item fill validation\n    if(itemArray[itemNumber] === 'empty') {\n      itemArray[itemNumber] = isValue ? 'cross' : 'circle';\n      setIsValue(!isValue);\n    } else {\n      return toast('Already Filled', { type: 'error' })\n    }\n\n    return checkIsWinner();\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"infoBlock\">\n        <h4>Player 1: <Icon className=\"icons circleIcon\" name=\"circle\" /> </h4>\n        <h4>Player 2: <Icon className=\"icons crossIcon\" name=\"cross\" /> </h4>\n        <h4>Empty: <Icon className=\"icons emptyIcon\" /> </h4>\n      </div>\n      {resultMsg ?\n        (\n          <div className=\"mb-2 mt-2\">\n            <h3 className=\"h3 text-success text-uppercase text-center\">\n              {resultMsg}\n            </h3>\n            <Button\n              color=\"success\"\n              block\n              onClick={reloadGame}\n            >Reload the game\n            </Button>\n          </div>\n        )\n      :\n        (\n          <h3 className=\"h3 text-center text-primary\">\n            {isValue ? \"Cross\" : \"Circle\"} turn\n          </h3>\n        )\n      }\n      <div className=\"grid\">\n        {itemArray.map((item, index) => (\n            <Card onClick={() => changeItem(index)}>\n              <CardBody className=\"box\">\n                <Icon className=\"icons\" name={item} />\n              </CardBody>\n            </Card>\n        ))}\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default CardList;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport CardList from './components/CardList/CardList';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Container, Col, Row } from 'reactstrap';\nimport './App.css'; \n\nconst App = () => {\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className={'offset-md-3'}>\n          <CardList />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}